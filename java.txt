//THICK LINE
#include <stdio.h>
#include <graphics.h>
#include <math.h>
int main() {
    int gd = DETECT, gm;
    int x1,y1,x2,y2,dx,dy,length,thickness;
    initgraph(&gd, &gm,"");
    printf("Enter starting coordinates-");
    scanf("%d%d",&x1,&y1);
    printf("Enter ending coordinates-");
    scanf("%d%d",&x2,&y2);
    printf("Enter thickness size-");
    scanf("%d",&thickness);

    dx = abs(x2 - x1); 
	dy = abs(y2 - y1);
    length = (dx > dy) ? dx : dy;

    float x_inc = (float)(x2 - x1) / length;
    float y_inc = (float)(y2 - y1) / length;

    for ( int i = 0; i <= length; i++) {
        for (int j = -thickness / 2; j <= thickness / 2; j++) {
            putpixel(x1 + i * x_inc, y1 + i * y_inc + j, WHITE);
        }
    }
    getch();
    closegraph();
}


//MID POINT
#include <graphics.h>

void drawCircle(int x0, int y0, int radius) {
    int x = radius, y = 0, err = 0;

    while (x >= y) {
        for (int i = -1; i <= 1; i += 2) {
            for (int j = -1; j <= 1; j += 2) {
                putpixel(x0 + i * x, y0 + j * y, 7);
                putpixel(x0 + i * y, y0 + j * x, 7);
            }
        }

        if (err <= 0) {
            y += 1;
            err += 2 * y + 1;
        }

        if (err > 0) {
            x -= 1;
            err -= 2 * x + 1;
        }
    }
}

int main() {
    int gd = DETECT, gm, x, y, r;

    initgraph(&gd, &gm, "C:\\Turboc3\\BGI");

    printf("Enter radius of circle: ");
    scanf("%d", &r);

    printf("Enter coordinates of center (x and y): ");
    scanf("%d%d", &x, &y);

    drawCircle(x, y, r);

    delay(5000);
    closegraph();

    return 0;
}



//Bresenham's Circle
#include <stdio.h>
#include <graphics.h>

// Function to draw a circle using Bresenham's Circle Drawing Algorithm
void drawBresenhamCircle(int xCenter, int yCenter, int radius) {
    int x = 0;
    int y = radius;
    int d = 3 - 2 * radius;

    while (x <= y) {
        // Draw the eight-way symmetric points
        putpixel(xCenter + x, yCenter + y, WHITE);
        putpixel(xCenter - x, yCenter + y, WHITE);
        putpixel(xCenter + x, yCenter - y, WHITE);
        putpixel(xCenter - x, yCenter - y, WHITE);
        putpixel(xCenter + y, yCenter + x, WHITE);
        putpixel(xCenter - y, yCenter + x, WHITE);
        putpixel(xCenter + y, yCenter - x, WHITE);
        putpixel(xCenter - y, yCenter - x, WHITE);

        if (d < 0)
            d = d + 4 * x + 6;
        else {
            d = d + 4 * (x - y) + 10;
            y--;
        }
        x++;
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, NULL);

    int xCenter, yCenter, radius;
    
    xCenter = 200;
    yCenter = 200;
    radius = 100;

    drawBresenhamCircle(xCenter, yCenter, radius);

    getch(); // Pause for 5 seconds
    closegraph();
    
}



//Bresenham's Line
#include <stdio.h>
#include <graphics.h>

// Function to draw a line using Bresenham's Line Drawing Algorithm
void drawBresenhamLine(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1);
    int dy = -abs(y2 - y1);
    int sx = x1 < x2 ? 1 : -1;
    int sy = y1 < y2 ? 1 : -1;
    int error = dx + dy;
    int e2;

    while (1) {
        putpixel(x1, y1, WHITE);
        
        if (x1 == x2 && y1 == y2) break;
        
        e2 = 2 * error;
        
        if (e2 >= dy) {
            error += dy;
            x1 += sx;
        }
        
        if (e2 <= dx) {
            error += dx;
            y1 += sy;
        }
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, NULL);

    int x1, y1, x2, y2;
    
    x1 = 100;
    y1 = 100;
    x2 = 300;
    y2 = 200;

    drawBresenhamLine(x1, y1, x2, y2);

    getch(); // Pause for 5 seconds
    closegraph();
}


//DDA Circle drawing algorithm
#include<stdio.h>
#include<conio.h>
#include<graphics.h>
#include<math.h>
void main()
{
int xc=340,yc=280,y,r,x;
float theta;
int gd=DETECT,gm;
initgraph(&gd,&gm,"C:\\turboc3\\BGI");
//printf("Enter the center of circle:");
//scanf("%d%d",&xc,&yc);
printf("Enter radius of circle:");
scanf("%d",&r);
for(theta=0;theta<=2*3.14;theta+=0.01)
{
x=(int)(xc+(r*cos(theta)));
y=(int)(yc+(r*sin(theta)));
putpixel(x,y,WHITE);
}
getch();
closegraph();
}


