Write a python program to check whether the given number is prime or not?
num = 11
# If given number is greater than 1
if num > 1:
	# Iterate from 2 to n / 2
	for i in range(2, int(num/2)+1):
		# If num is divisible by any number between
		# 2 and n / 2, it is not prime
		if (num % i) == 0:
			print(num, "is not a prime number")
			break
	else:
		print(num, "is a prime number")
else:
	print(num, "is not a prime number")


# Python program to shuffle a deck of card
# importing modules
import itertools, random
# make a deck of cards
deck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))
# shuffle the cards
random.shuffle(deck)
# draw five cards
print("You got:")
for i in range(5):
   print(deck[i][0], "of", deck[i][1])



# Python program to display the Fibonacci sequence
def recur_fibo(n):
   if n <= 1:
       return n
   else:
       return(recur_fibo(n-1) + recur_fibo(n-2))
nterms = 10
# check if the number of terms is valid
if nterms <= 0:
   print("Plese enter a positive integer")
else:
   print("Fibonacci sequence:")
   for i in range(nterms):
       print(recur_fibo(i))



# Python program to display all the prime numbers within an interval
lower = 900
upper = 1000
print("Prime numbers between", lower, "and", upper, "are:")
for num in range(lower, upper + 1):
   # all prime numbers are greater than 1
   if num > 1:
       for i in range(2, num):
           if (num % i) == 0:
               break
       else:
           print(num)




#simple chatbot
def chat():
    responses = {
        "hi": "Hello!",
        "hello": "Hi there!",
        "how are you?": "I'm just a bot, but I'm doing fine. How about you?",
        "what's your name?": "I'm just a bot, you can call me ChatBot!",
        "bye": "Goodbye! Take care!",
    }
    print("Hello! I'm a simple chatbot.")
    print("You can type 'bye' to exit the conversation.")
    while True:
        user_input = input("You: ").strip().lower()

        if user_input == 'bye':
            print("Bot: Goodbye!")
            break
        elif user_input in responses:
            print("Bot:", responses[user_input])
        else:
            print("Bot: I'm just a simple bot and I didn't understand that. Can you please rephrase?")
chat()







//chat bot with json
import json
import random
def load_responses():
    with open('responses.json') as file:
        return json.load(file)
def chatbot_response(user_input, responses):
    return random.choice(responses.get(user_input.lower(), ["I'm not sure how to respond to that."]))
responses = load_responses()
print("Simple Chatbot: Hello! Type 'bye' to exit.")
while True:
    user_input = input("You: ").lower()
    if user_input == 'bye':
        print("Simple Chatbot: Goodbye!")
        break
    print("Simple Chatbot:", chatbot_response(user_input, responses))




1.	Write a python program to implement List operations (Nested List, Length, Concatenation, Membership, Iteration, Indexing and Slicing)?
# Nested List
nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print("nested list = ",nested_list)
# Length
lan = len(nested_list)
print("length of the list= ",lan)
# Concatenation
list1 = [1, 2, 3]
list2 = [4, 5, 6]
print("Concatenation =", list1 + list2)
# Membership
ele_present = 4 in list1
print("Membership check= ",ele_present)
# Iteration
print("Iteration =")
for item in list1:
    print(item)
# Indexing and Slicing
element = list1[2]
print("Indexing= ",element)
sliced_list = list1[1:3]
print("Slicing= ",sliced_list)



2.	Write a python program to implement List methods (Add, Append, Extend & Delete).
# Add
list1 = [1, 2, 3]
list1[0] += 5
# Append
list1.append(4)
# Extend
list1.extend([5, 6, 7])
# Delete
del list1[2]


3.	Write a python program to Check Whether a String is Palindrome or Not
def is_palindrome(input_string):
    # Convert the input string to lowercase and remove spaces
    input_string = input_string.lower().replace(" ", "")
    # Check if the string is equal to its reverse
    return input_string == input_string[::-1]
input_string = input("Enter a string: ")
if is_palindrome(input_string):
    print("The string is a palindrome.")
else:
    print("The string is not a palindrome.")





4.	Write a python program to Remove Punctuations from a String.

def remove_punctuation(input_string):
    punctuations = '''!()-[]{};:'"\,<>./?@#$%^&*_~'''
    cleaned_string = ""
    for char in input_string:
        if char not in punctuations:
            cleaned_string += char
    return cleaned_string
input_string = input("Enter a string with punctuations: ")
cleaned_string = remove_punctuation(input_string)
print("String without punctuations:", cleaned_string)






5.	Write a program in python to implement Depth-First Traversal
# Assuming a graph represented as an adjacency list
graph = {1: [2, 3], 2: [4, 5], 3: [6], 4: [], 5: [6], 6: []}
def depth_first_traversal(node, visited):
    if node not in visited:
        print(node, end=" ")
        visited.add(node)
        for neighbor in graph[node]:
            depth_first_traversal(neighbor, visited)
visited_nodes = set()
depth_first_traversal(1, visited_nodes)


6.	Write a program in python to implement Breadth-First Traversal
from collections import deque
# Assuming a graph represented as an adjacency list
graph = {1: [2, 3], 2: [4, 5], 3: [6], 4: [], 5: [6], 6: []}
def breadth_first_traversal(start):
    visited = set()
    queue = deque([start])
    while queue:
        node = queue.popleft()
        if node not in visited:
            print(node, end=" ")
            visited.add(node)
            queue.extend(graph[node])
breadth_first_traversal(1)
