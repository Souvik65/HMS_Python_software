def tower_of_hanoi(n, source, auxiliary, target):
    if n == 1:
        print("Move disk 1 from rod", source, "to rod", target)
        return
    tower_of_hanoi(n-1, source, target, auxiliary)
    print("Move disk", n, "from rod", source, "to rod", target)
    tower_of_hanoi(n-1, auxiliary, source, target)
num_disks = int(input("Enter the number of disks: "))
source_peg = input("Enter the name of the source peg: ")
auxiliary_peg = input("Enter the name of the auxiliary peg: ")
target_peg = input("Enter the name of the target peg: ")

tower_of_hanoi(num_disks, source_peg, auxiliary_peg, target_peg)






#String is Palindrome or Not
def is_palindrome(input_string):
       input_string = input_string.lower().replace(" ", "")
    return input_string == input_string[::-1]
input_string = input("Enter a string: ")
if is_palindrome(input_string):
    print("The string is a palindrome.")
else:
    print("The string is not a palindrome.")





#bfs dfs

adj_list={'A':['C','D','B'],'B':['E','C'],'C':['D'],'D':['E'],'E':[]}
visited=set()

def dfs(visited,adj_list,root):
    if root not in visited:
        print(root)
        visited.add(root)
        for neighbour in adj_list[root]:
            dfs(visited,adj_list,neighbour)

def bfs(visited,adj_list, queue):
    if queue:
        node = queue.pop(0)
        if node not in visited:
            print(node)
            visited.add(node)
            for neighbour in adj_list[node]:
                queue.append(neighbour)
        bfs(visited,adj_list, queue)

#bfs(visited, adj_list, ['A'])
dfs(visited, adj_list, 'A')





#water_jug_problem
def water_jug_problem(cap1, cap2, target):
    visited = set()
    stack = [(0, 0, "Initial state")]
    visited.add((0, 0))
    steps = []

    while stack:
        j1, j2, step = stack.pop()
        steps.append(step)

        if j1 == target or j2 == target:
            return True, steps

        # Fill jug1
        if (j1 < cap1) and ((cap1, j2) not in visited):
            stack.append((cap1, j2, f"Fill Jug1: ({cap1},{j2})"))
            visited.add((cap1, j2))

        # Fill jug2
        if (j2 < cap2) and ((j1, cap2) not in visited):
            stack.append((j1, cap2, f"Fill Jug2: ({j1},{cap2})"))
            visited.add((j1, cap2))

        # Empty jug1
        if (j1 > 0) and ((0, j2) not in visited):
            stack.append((0, j2, f"Empty Jug1: (0,{j2})"))
            visited.add((0, j2))

        # Empty jug2
        if (j2 > 0) and ((j1, 0) not in visited):
            stack.append((j1, 0, f"Empty Jug2: ({j1},0)"))
            visited.add((j1, 0))

        # Pour from jug1 to jug2
        pour_amt = min(j1, cap2 - j2)
        if pour_amt > 0:
            new_j1 = j1 - pour_amt
            new_j2 = j2 + pour_amt
            if (new_j1, new_j2) not in visited:
                stack.append((new_j1, new_j2, f"Pour from Jug1 to Jug2: ({new_j1},{new_j2})"))
                visited.add((new_j1, new_j2))

        # Pour from jug2 to jug1
        pour_amt = min(j2, cap1 - j1)
        if pour_amt > 0:
            new_j1 = j1 + pour_amt
            new_j2 = j2 - pour_amt
            if (new_j1, new_j2) not in visited:
                stack.append((new_j1, new_j2, f"Pour from Jug2 to Jug1: ({new_j1},{new_j2})"))
                visited.add((new_j1, new_j2))

    return False, steps
cap1 = int(input("Enter the capacity of Jug1: "))
cap2 = int(input("Enter the capacity of Jug2: "))
target = int(input("Enter the target amount of water: "))

print("Steps to achieve the target amount of water:")
found, steps = water_jug_problem(cap1, cap2, target)
if found:
    for i, step in enumerate(steps):
        print(f"Step {i + 1}: {step}")
else:
    print("Target amount of water cannot be achieved.")









#water jug
def elseR():
  print("Rule Denied.")
  return x,y

def apply_rule(ch , x , y):
  if ch == 1:
    if x<j1:
      return j1,y
    else:
      elseR()
  if ch == 2:
    if y<j2:
      return x,j2
    else:
      elseR()
  if ch == 3:
    if x>0 and x+y<=j2:
      return 0,x+y
    else:
      elseR()
  if ch == 4:
    if y>0 and x+y<=j1:
      return x+y,0
    else:
      elseR()
  if ch == 5:
    if x>0 and x+y>=j2:
      return x-(j2-y),j2
    else:
      elseR()
  if ch == 6:
    if y>0 and x+y>=j1:
      return j1,y-(j1-x)
    else:
      elseR()
  if ch == 7:
    if x>0:
      return 0,y
    else:
      elseR()
  if ch == 8:
    if y>0:
      return x,0
    else:
      elseR()

j1 = int(input("Capacity of jug 1: "))
j2 = int(input("Capacity of jug 2: "))

g = int(input("Amount of watter to be measured: "))

x = y = 0
while (True):
  if x==g or y==g:
    print("GOAL ACHIVED.")
    break
  else:
    print("====================Rules====================")
    print("Rule 1: Fill Jug 1.")
    print("Rule 2: Fill Jug 2.")
    print("Rule 3: Transform all water from jug 1 to jug 2.")
    print("Rule 4: Transform all water from jug 2 to jug 1.")
    print("Rule 5: Transform some water from jug 1 to jug 2 until jug 2 is full.")
    print("Rule 6: Transform some water from jug 2 to jug 1 until jug 1 is full.")
    print("Rule 7: Empty jug 1")
    print("Rule 8: Empty jug 2")
    ch = int(input("Enter the rule to apply: "))
    x ,y = apply_rule(ch,x,y)
    print("====================State====================")
    print("Current State: ",x,y)




















#A*
def aStarAlgo(start_node, stop_node):
         
        open_set = set(start_node) 
        closed_set = set()
        g = {} 
        parents = {}
        g[start_node] = 0
        parents[start_node] = start_node
         
        while len(open_set) > 0:
            n = None
            for v in open_set:
                if n == None or g[v] + heuristic(v) < g[n] + heuristic(n):
                    n = v
            if n == stop_node or Graph_nodes[n] == None:
                pass
            else:
                for (m, weight) in get_neighbors(n):

                    if m not in open_set and m not in closed_set:
                        open_set.add(m)
                        parents[m] = n
                        g[m] = g[n] + weight

                    else:
                        if g[m] > g[n] + weight:
                            g[m] = g[n] + weight
                            parents[m] = n

                            if m in closed_set:
                                closed_set.remove(m)
                                open_set.add(m)
            if n == None:
                print('Path does not exist!')
                return None

            if n == stop_node:
                path = []
                while parents[n] != n:
                    path.append(n)
                    n = parents[n]
                path.append(start_node)
                path.reverse()
                print('Path found: {}'.format(path))
                return path
            open_set.remove(n)
            closed_set.add(n)
        print('Path does not exist!')
        return None
    
def get_neighbors(v):
    if v in Graph_nodes:
        return Graph_nodes[v]
    else:
        return None

def heuristic(n):
        H_dist = {
            'A': 11,
            'B': 6,
            'C': 99,
            'D': 1,
            'E': 7,
            'G': 0,
        }
 
        return H_dist[n]
 
Graph_nodes = {
    'A': [('B', 2), ('E', 3)],
    'B': [('C', 1),('G', 9)],
    'C': None,
    'E': [('D', 6)],
    'D': [('G', 1)],
}
aStarAlgo('A', 'G')


















































Write a python program to check whether the given number is prime or not?
num = 11
# If given number is greater than 1
if num > 1:
	# Iterate from 2 to n / 2
	for i in range(2, int(num/2)+1):
		# If num is divisible by any number between
		# 2 and n / 2, it is not prime
		if (num % i) == 0:
			print(num, "is not a prime number")
			break
	else:
		print(num, "is a prime number")
else:
	print(num, "is not a prime number")


# Python program to shuffle a deck of card
# importing modules
import itertools, random
# make a deck of cards
deck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))
# shuffle the cards
random.shuffle(deck)
# draw five cards
print("You got:")
for i in range(5):
   print(deck[i][0], "of", deck[i][1])



# Python program to display the Fibonacci sequence
def recur_fibo(n):
   if n <= 1:
       return n
   else:
       return(recur_fibo(n-1) + recur_fibo(n-2))
nterms = 10
# check if the number of terms is valid
if nterms <= 0:
   print("Plese enter a positive integer")
else:
   print("Fibonacci sequence:")
   for i in range(nterms):
       print(recur_fibo(i))



# Python program to display all the prime numbers within an interval
lower = 900
upper = 1000
print("Prime numbers between", lower, "and", upper, "are:")
for num in range(lower, upper + 1):
   # all prime numbers are greater than 1
   if num > 1:
       for i in range(2, num):
           if (num % i) == 0:
               break
       else:
           print(num)




#simple chatbot
def chat():
    responses = {
        "hi": "Hello!",
        "hello": "Hi there!",
        "how are you?": "I'm just a bot, but I'm doing fine. How about you?",
        "what's your name?": "I'm just a bot, you can call me ChatBot!",
        "bye": "Goodbye! Take care!",
    }
    print("Hello! I'm a simple chatbot.")
    print("You can type 'bye' to exit the conversation.")
    while True:
        user_input = input("You: ").strip().lower()

        if user_input == 'bye':
            print("Bot: Goodbye!")
            break
        elif user_input in responses:
            print("Bot:", responses[user_input])
        else:
            print("Bot: I'm just a simple bot and I didn't understand that. Can you please rephrase?")
chat()







//chat bot with json
import json
import random
def load_responses():
    with open('responses.json') as file:
        return json.load(file)
def chatbot_response(user_input, responses):
    return random.choice(responses.get(user_input.lower(), ["I'm not sure how to respond to that."]))
responses = load_responses()
print("Simple Chatbot: Hello! Type 'bye' to exit.")
while True:
    user_input = input("You: ").lower()
    if user_input == 'bye':
        print("Simple Chatbot: Goodbye!")
        break
    print("Simple Chatbot:", chatbot_response(user_input, responses))




1.	Write a python program to implement List operations (Nested List, Length, Concatenation, Membership, Iteration, Indexing and Slicing)?
# Nested List
nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print("nested list = ",nested_list)
# Length
lan = len(nested_list)
print("length of the list= ",lan)
# Concatenation
list1 = [1, 2, 3]
list2 = [4, 5, 6]
print("Concatenation =", list1 + list2)
# Membership
ele_present = 4 in list1
print("Membership check= ",ele_present)
# Iteration
print("Iteration =")
for item in list1:
    print(item)
# Indexing and Slicing
element = list1[2]
print("Indexing= ",element)
sliced_list = list1[1:3]
print("Slicing= ",sliced_list)



2.	Write a python program to implement List methods (Add, Append, Extend & Delete).
# Add
list1 = [1, 2, 3]
list1[0] += 5
# Append
list1.append(4)
# Extend
list1.extend([5, 6, 7])
# Delete
del list1[2]


3.	Write a python program to Check Whether a String is Palindrome or Not
def is_palindrome(input_string):
    # Convert the input string to lowercase and remove spaces
    input_string = input_string.lower().replace(" ", "")
    # Check if the string is equal to its reverse
    return input_string == input_string[::-1]
input_string = input("Enter a string: ")
if is_palindrome(input_string):
    print("The string is a palindrome.")
else:
    print("The string is not a palindrome.")





4.	Write a python program to Remove Punctuations from a String.

def remove_punctuation(input_string):
    punctuations = '''!()-[]{};:'"\,<>./?@#$%^&*_~'''
    cleaned_string = ""
    for char in input_string:
        if char not in punctuations:
            cleaned_string += char
    return cleaned_string
input_string = input("Enter a string with punctuations: ")
cleaned_string = remove_punctuation(input_string)
print("String without punctuations:", cleaned_string)






5.	Write a program in python to implement Depth-First Traversal
# Assuming a graph represented as an adjacency list
graph = {1: [2, 3], 2: [4, 5], 3: [6], 4: [], 5: [6], 6: []}
def depth_first_traversal(node, visited):
    if node not in visited:
        print(node, end=" ")
        visited.add(node)
        for neighbor in graph[node]:
            depth_first_traversal(neighbor, visited)
visited_nodes = set()
depth_first_traversal(1, visited_nodes)


6.	Write a program in python to implement Breadth-First Traversal
from collections import deque
# Assuming a graph represented as an adjacency list
graph = {1: [2, 3], 2: [4, 5], 3: [6], 4: [], 5: [6], 6: []}
def breadth_first_traversal(start):
    visited = set()
    queue = deque([start])
    while queue:
        node = queue.popleft()
        if node not in visited:
            print(node, end=" ")
            visited.add(node)
            queue.extend(graph[node])
breadth_first_traversal(1)
